#!/bin/sh
set -f

BORG_REMOTE="iridium" # Set default remote
SSH_PORT=22           # Set default port
BACKUP_OS=false

EXCLUDE_FILE=`mktemp`

EXCLUDES=(
    'sh:**/*tmp*/'
    'sh:**/*cache*/'
    'sh:**/*Cache*/'
    'sh:**/logs/'
    'sh:**/lost+found*/'
    'sh:**/*Trash*/'
    'sh:**/*trash*/'
    'sh:**/.luckyBackup/'
    'sh:**/node_modules/'
    '*.*~'
    '*.log'
    '*.nobak'
    '*.nobak.???'
)

EXCLUDES_HOME=(
    "sh:**/.env/"
    "sh:**/unpack_*/"
    "sh:$HOME/.android/avd/"
    "sh:$HOME/.gradle/"
    "sh:$HOME/.gradle-kotlin-dsl/"
    "sh:$HOME/.local/share/lutris/runners/"
    "sh:$HOME/.local/share/JetBrains/Toolbox/download/"
    "sh:$HOME/.local/share/Steam/clientui/"
    "sh:$HOME/.local/share/Steam/graphics/"
    "sh:$HOME/.local/share/Steam/linux*/"
    "sh:$HOME/.local/share/Steam/public/"
    "sh:$HOME/.local/share/Steam/steamapps/common/"
    "sh:$HOME/.local/share/Steam/steamapps/workshop/"
    "sh:$HOME/.local/share/Steam/steamui/"
    "sh:$HOME/.local/share/Steam/resource/"
    "sh:$HOME/.local/share/Steam/tenfoot/"
    "sh:$HOME/.local/share/Steam/ubuntu12_*/"
    "sh:$HOME/.m2/"
    "sh:$HOME/.nuget/packages/"
    "sh:$HOME/.config/chrome-container.img"
    "sh:$HOME/Apps/go/src/*golang.org/"
    "sh:$HOME/Apps/go/src/github.com/"
    "sh:$HOME/Apps/go/pkg/"
    "sh:$HOME/Development/**/.gradle/"
    "sh:$HOME/Development/**/build/"
    "sh:$HOME/Development/sdk/system-images/"
    "sh:$HOME/Games/"
)

EXCLUDES_OS=(
    'sh:/@/'
    'sh:/@home/'
    'sh:/dev'
    'sh:/home'
    'sh:/media'
    'sh:/mnt/'
    'sh:/proc'
    'sh:/run'
    'sh:/snapshots'
    'sh:/sys'
    'sh:/usr/boost/'
    'sh:/var/lib/docker/'
    'sh:/var/lib/systemd/coredump'
    'sh:/var/log/'
    'sh:/var/run/'
)

# Parse arguments
while getopts ":r:p:o" opt; do
    case $opt in
        r)
            BORG_REMOTE=$OPTARG
            ;;
        p)
            SSH_PORT=$OPTARG
            ;;
        o)
            BACKUP_OS=true
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
  esac
done

# Some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

info "Starting backup"

# Set up environment based on backup source
if [ $BACKUP_OS == true ]; then
    export BORG_REPO="ssh://$BORG_REMOTE/system_backups/$(hostname)_os"
    TARGET=/
    CUR_EXCLUDES=${EXCLUDES_OS[@]}
else
    export BORG_REPO="ssh://$BORG_REMOTE/backups/$(hostname)"
    TARGET=$HOME
    CUR_EXCLUDES=${EXCLUDES_HOME[@]}
fi

export BORG_RSH="ssh -i $HOME/.ssh/id_ed25519 -F $HOME/.ssh/config -p $SSH_PORT"

# Generate exclude file
for element in ${EXCLUDES[@]}; do
    echo "$element" >> $EXCLUDE_FILE
done

for element in ${CUR_EXCLUDES[@]}; do
    echo "$element" >> $EXCLUDE_FILE
done

# Determine compression algorithm based on core count/system performance
if [ $(nproc) -gt 4 ]; then
    compression=zstd,16
else
    compression=lz4
fi

# Parameters passed to borg
PARAMS=(
    create
    --verbose
    --filter AME
    --list
    --progress
    --stats
    --show-rc
    --checkpoint-interval 300
    --compression $compression
    --noflags
    --exclude-caches
    --exclude-from $EXCLUDE_FILE
    ::'{hostname}-{now}'
    $TARGET
)

if [ $BACKUP_OS == true ]; then
    BORG_CMD="sudo BORG_REPO='$BORG_REPO' BORG_RSH='$BORG_RSH' borg"
else
    BORG_CMD='borg'
fi

# Start backup
eval $BORG_CMD ${PARAMS[@]}

backup_exit=$?

rm $EXCLUDE_FILE

info "Pruning repository"

# Use the `prune` subcommand to maintain the specified amount of archives.
# Older archives are always kept in addition to the already matched ones.
# The '{hostname}-' prefix limits the prune's operation to this machine's archives.
eval $BORG_CMD prune                                                           \
    --list                                                                     \
    --prefix '{hostname}-'                                                     \
    --show-rc                                                                  \
    --keep-daily    7                                                          \
    --keep-weekly   3                                                          \
    --keep-monthly  5                                                          \
    --keep-yearly   1                                                          \

prune_exit=$?

eval $BORG_CMD compact

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 1 ];
then
    info "Backup and/or Prune finished with a warning"
fi

if [ ${global_exit} -gt 1 ];
then
    info "Backup and/or Prune finished with an error"
fi

exit ${global_exit}
