#!/bin/sh
set -f

BORG_REMOTE="iridium" # Set default remote
SSH_PORT=22           # Set default port
BACKUP_OS=false

EXCLUDE_FILE=`mktemp`

EXCLUDES=(
    'sh:**/*.*~'
    'sh:**/*.log'
    'sh:**/*.nobak'
    'sh:**/*.nobak.*'
    'sh:**/*.temp'
    'sh:**/*.tmp'
    'sh:**/*[Cc]ache*'
    'sh:**/*[Tt]rash*'
    'sh:**/*_log'
    'sh:**/.luckyBackup'
    'sh:**/log'
    'sh:**/logs'
    'sh:**/lost+found'
    'sh:**/node_modules'
    'sh:**/temp'
    'sh:**/tmp'
)

EXCLUDES_HOME=(
    'sh:**/.env'
    'sh:**/unpack_*'
    'sh:home/*/.android/avd'
    'sh:home/*/.config/*/Default/IndexedDB'
    'sh:home/*/.config/vivaldi/Default/VivaldiThumbnails'
    'sh:home/*/.cpanm/work'
    'sh:home/*/.dartServer'
    'sh:home/*/.gradle'
    'sh:home/*/.gradle-kotlin-dsl'
    'sh:home/*/.local/share/JetBrains/Toolbox/download'
    'sh:home/*/.local/share/Steam/clientui'
    'sh:home/*/.local/share/Steam/compatibilitytools.d'
    'sh:home/*/.local/share/Steam/graphics'
    'sh:home/*/.local/share/Steam/linux*'
    'sh:home/*/.local/share/Steam/public'
    'sh:home/*/.local/share/Steam/resource'
    'sh:home/*/.local/share/Steam/steamapps/common'
    'sh:home/*/.local/share/Steam/steamapps/workshop'
    'sh:home/*/.local/share/Steam/steamui'
    'sh:home/*/.local/share/Steam/tenfoot'
    'sh:home/*/.local/share/Steam/ubuntu12_*'
    'sh:home/*/.local/share/lutris/runners'
    'sh:home/*/.m2'
    'sh:home/*/.nuget'
    'sh:home/*/.pyenv'
    'sh:home/*/.rustup/downloads'
    'sh:home/*/.rustup/toolchains'
    'sh:home/*/Apps/go/pkg'
    'sh:home/*/Apps/go/src'
    'sh:home/*/Development/**/.gradle'
    'sh:home/*/Development/**/build'
    'sh:home/*/Development/**/.fvm'
    'sh:home/*/Development/**/flutter_build'
    'sh:home/*/Development/AUR/*/*.pkg.*'
    'sh:home/*/Development/AUR/*/pkg'
    'sh:home/*/Development/AUR/*/src'
    'sh:home/*/Development/sdk/system-images'
    'sh:home/*/fvm'
    'sh:home/*/Games'
)

EXCLUDES_OS=(
    'sh:@/'
    'sh:@home/'
    'sh:dev'
    'sh:home'
    'sh:media'
    'sh:mnt/'
    'sh:proc'
    'sh:run'
    'sh:snapshots'
    'sh:sys'
    'sh:usr/boost/'
    'sh:var/lib/docker/'
    'sh:var/lib/systemd/coredump'
    'sh:var/log/'
    'sh:var/run/'
    'sh:opt/flutter/'
    'sh:opt/rocm/'
)

# Parse arguments
while getopts ":r:p:o" opt; do
    case $opt in
        r)
            BORG_REMOTE=$OPTARG
            ;;
        p)
            SSH_PORT=$OPTARG
            ;;
        o)
            BACKUP_OS=true
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
  esac
done

# Some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

info "Starting backup"

# Set up environment based on backup source
if [ $BACKUP_OS == true ]; then
    export BORG_REPO="ssh://$BORG_REMOTE/system_backups/$(hostname)_os"
    TARGET=/
    CUR_EXCLUDES=${EXCLUDES_OS[@]}
else
    export BORG_REPO="ssh://$BORG_REMOTE/backups/$(hostname)"
    TARGET=$HOME
    CUR_EXCLUDES=${EXCLUDES_HOME[@]}
fi

export BORG_RSH="ssh -i $HOME/.ssh/id_ed25519 -F $HOME/.ssh/config -p $SSH_PORT"

# Generate exclude file
for element in ${EXCLUDES[@]}; do
    echo "$element" >> $EXCLUDE_FILE
done

for element in ${CUR_EXCLUDES[@]}; do
    echo "$element" >> $EXCLUDE_FILE
done

# Determine compression algorithm based on core count/system performance
if [ $(nproc) -gt 4 ]; then
    compression=zstd,16
else
    compression=lz4
fi

# Parameters passed to borg
PARAMS=(
    create
    --verbose
    --filter AME
    --list
    --progress
    --stats
    --show-rc
    --checkpoint-interval 300
    --compression $compression
    --noflags
    --exclude-caches
    --exclude-from $EXCLUDE_FILE
    ::'{hostname}-{now}'
    $TARGET
)

if [ $BACKUP_OS == true ]; then
    BORG_CMD="sudo BORG_REPO='$BORG_REPO' BORG_RSH='$BORG_RSH' borg"
else
    BORG_CMD='borg'
fi

# Start backup
eval $BORG_CMD ${PARAMS[@]}

backup_exit=$?

rm $EXCLUDE_FILE

info "Pruning repository"

# Use the `prune` subcommand to maintain the specified amount of archives.
# Older archives are always kept in addition to the already matched ones.
# The '{hostname}-' prefix limits the prune's operation to this machine's archives.
eval $BORG_CMD prune                                                           \
    --list                                                                     \
    --glob-archives '{hostname}-*'                                             \
    --show-rc                                                                  \
    --keep-daily    7                                                          \
    --keep-weekly   3                                                          \
    --keep-monthly  5                                                          \
    --keep-yearly   1                                                          \

prune_exit=$?

eval $BORG_CMD compact

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 1 ]; then
    info "Backup and/or prune finished with a warning"
elif [ ${global_exit} -gt 1 ]; then
    info "Backup and/or prune finished with an error"
fi

exit ${global_exit}
